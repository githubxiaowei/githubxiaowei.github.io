<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>无标度网络的生成模型</title>
    <url>/2021/02/%E6%97%A0%E6%A0%87%E5%BA%A6%E7%BD%91%E7%BB%9C%E7%9A%84%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>1999 年 Barabási 和 Albert 提出了无标度网络模型（简称 BA 模型）。无标度网络的重要特征为： 无标度网络的节点度分布服从幂律分布。</p>
<p>无标度网络的度分布 $p(d)$ 满足<script type="math/tex">p(d)\sim d^{-\alpha}，</script>其中 $d$ 代表度的大小， $\alpha$ 为度分布的幂律指数。 真实网络 $\alpha$ 值一般介于 2~3之间。</p>
<p>近年来越来越多的研究表明， 真实世界网络既不是规则网络， 也不是随机网络， 而是兼具小世界和无标度特性的复杂网络， 具有与规则网络和随机网络截然不同的统计特性。</p>
<span id="more"></span>
<p>本文采用的无标度网络生成模型是由 Barabási 和 Albert 于 1999 年提出的增长网络网络模型（BA 模型）。在该模型中，网络初始时具有 $m_0$ 个节点，两两互连。 之后每过一个时间单位增加一个新节点。新节点从当前网络中选择$m(m ≤ m_0)$ 个节点与之连接， 某节点 $v_i$ 被选中的概率 $p(v_i)$ 与其节点度 $d_i$ 的大小成正比，即<script type="math/tex">p(v_i) = \frac{d_i}{\sum_j d_j}</script>经过 t 个时间单位后，网络中含有 $m_0+t$ 个节点，$m_0(m_0-1)/2+mt$条边。可以证明当 t 足够大时， 按此规律增长的网络的度分布为幂指数等于 3 的幂律分布。</p>
<p>依据新节点的连接规律，建立节点度演化的动力学模型：<br><img src="https://img-blog.csdn.net/20181008113859419?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>其中最后一个等式在 $t$ 足够大时近似成立。 将节点 $i$ 加入网络的时间记为 $t_i$，<br>则有初始条件 $d_i(t_i) = m$。解得<br><img src="https://img-blog.csdn.net/20181008114022515?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>在 $t$ 足够大， 对任意节点 $i$， 其度的大小满足<br><img src="https://img-blog.csdn.net/20181008114111695?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20181008114126346?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>其中第三个等式成立的原因是加入节点的时间是等间隔的。上式正是网络节点度的概率分布函数， 可以求出节点度的概率密度函数 $p(d)$ 为<br><img src="https://img-blog.csdn.net/20181008114239376?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>可知所生成网络的幂律分布的指数为 3。下面的matlab程序模拟了BA网络的演化过程：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scale_free</span><span class="params">(N,m0,m)</span></span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">%param  N: num of vertices 期望节点数</span></span><br><span class="line"><span class="comment">%param m0: num of initial vertices 初始边数</span></span><br><span class="line"><span class="comment">%param  m: num of vertices a new node try to connect 新节点连接的边数</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line">tic;</span><br><span class="line"></span><br><span class="line">I = <span class="number">2</span> ;    <span class="comment">%生成的网络个数，只为统计需要</span></span><br><span class="line"></span><br><span class="line">realization_of_distribution = sparse( I , N ) ;</span><br><span class="line"><span class="keyword">for</span> J = <span class="number">1</span> : I</span><br><span class="line">    format long;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">%初始化邻接矩阵，前m0个节点两两互连</span></span><br><span class="line">    adjacent_matrix = sparse( m0 , m0 ) ;</span><br><span class="line">    <span class="keyword">parfor</span> <span class="built_in">i</span> = <span class="number">1</span> : m0</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span> : m0</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">j</span> ~= <span class="built_in">i</span></span><br><span class="line">                adjacent_matrix( <span class="built_in">i</span> , <span class="built_in">j</span> ) = <span class="number">1</span> ;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    adjacent_matrix = sparse( adjacent_matrix ) ;</span><br><span class="line"></span><br><span class="line">	<span class="comment">% 计算当前节点度分布</span></span><br><span class="line">    node_degree = sparse( <span class="number">1</span> , m0 ) ;</span><br><span class="line">    <span class="keyword">for</span> p = <span class="number">1</span> : m0</span><br><span class="line">        node_degree( p ) = sum( adjacent_matrix( <span class="number">1</span> : m0 , p ) ) ;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">% 开始演化</span></span><br><span class="line">    <span class="keyword">for</span> iteration = m0 + <span class="number">1</span> : N</span><br><span class="line">        total_degree = <span class="number">2</span> * m * ( iteration - m0 <span class="number">-1</span> ) + m0*(m0<span class="number">-1</span>) ; <span class="comment">% m*2</span></span><br><span class="line">        degree_frequency = node_degree / total_degree ;</span><br><span class="line">        cum_distribution = cumsum( degree_frequency ) ;</span><br><span class="line"></span><br><span class="line">        choose = <span class="built_in">zeros</span>( <span class="number">1</span> , m ) ;</span><br><span class="line">        <span class="keyword">for</span> new_edge = <span class="number">1</span>:m</span><br><span class="line">            r = <span class="built_in">rand</span>(<span class="number">1</span>) ;</span><br><span class="line">            choose_edge = <span class="built_in">find</span>( cum_distribution &gt;= r ,<span class="number">1</span>) ;</span><br><span class="line">            <span class="keyword">while</span> any(choose == choose_edge)</span><br><span class="line">                r = <span class="built_in">rand</span>(<span class="number">1</span>) ;</span><br><span class="line">                choose_edge = <span class="built_in">find</span>(  cum_distribution &gt;= r,<span class="number">1</span>) ;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            choose(new_edge) = choose_edge;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k = <span class="number">1</span> : m</span><br><span class="line">            adjacent_matrix( iteration , choose(k) ) = <span class="number">1</span> ;</span><br><span class="line">            adjacent_matrix( choose(k) , iteration ) = <span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> p = <span class="number">1</span> : iteration</span><br><span class="line">            node_degree(p) = sum( adjacent_matrix( <span class="number">1</span> : iteration , p ) ) ;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    number_of_nodes_with_equal_degree = <span class="built_in">zeros</span>( <span class="number">1</span> , N ) ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">parfor</span> <span class="built_in">i</span> = <span class="number">1</span> : N</span><br><span class="line">        number_of_nodes_with_equal_degree(<span class="built_in">i</span>) = <span class="built_in">length</span>( <span class="built_in">find</span>( node_degree == <span class="built_in">i</span> ) ) ;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    realization_of_distribution( J , : ) = number_of_nodes_with_equal_degree ;</span><br><span class="line"></span><br><span class="line">    save([<span class="string">&#x27;adj_&#x27;</span>,num2str(J)],<span class="string">&#x27;adjacent_matrix&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%&#123;</span></span><br><span class="line"><span class="comment">%plot degree distribution 在双对数坐标下画图</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">average = sum( realization_of_distribution )/ ( I * N );</span></span><br><span class="line"><span class="comment">loglog( 1:N , average , &#x27;*&#x27; )</span></span><br><span class="line"><span class="comment">axis([1 N 0.0000001 0.9])</span></span><br><span class="line"><span class="comment">hold on;</span></span><br><span class="line"><span class="comment">x = 1:N;</span></span><br><span class="line"><span class="comment">y = 2 * m^2 * x .^ ( -3 ) ;</span></span><br><span class="line"><span class="comment">loglog( x , y , &#x27;r&#x27; ) ;  %  p(k)=2*m^2*k^(-3)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">%&#125;</span></span><br><span class="line">toc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>人工生成网络的概率质量函数（网络节点数 $N$ 分别为 50、 100、 200、 400）<br><img src="https://img-blog.csdn.net/20181008113233633?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>图中直线为理论结果： $p(d)=2\frac{m^2}{d^3}$。</p>
]]></content>
      <categories>
        <category>复杂网络</category>
      </categories>
      <tags>
        <tag>无标度</tag>
        <tag>网络</tag>
      </tags>
  </entry>
</search>
