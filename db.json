{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/logo-header.png","path":"images/logo-header.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1614089546589},{"_id":"source/_posts/无标度网络的生成模型.md","hash":"5c32e7a98e83604fb21d350b366e7305edb00338","modified":1614664167431},{"_id":"source/about/index.md","hash":"ebdf4e0396999afc6d63a827ab39af3af669e0b2","modified":1614155928533},{"_id":"source/images/logo-header.png","hash":"651a9b5148d097e7498b27bb2e502ea10e0041b4","modified":1614611670770},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"53a23079d9db78f30122b8b3b22aec851aa7fe96","modified":1614089560473},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"public/about/index.html","hash":"24df266d042079ce3cb73a9326f4432ff3138d57","modified":1614667621447},{"_id":"public/2021/02/23/hello-world/index.html","hash":"714fcadc99c536a038a7079aaee67db1323c2fa4","modified":1614667621447},{"_id":"public/archives/index.html","hash":"51bb77df0fb86de8febf8123aeadf6a2d2dd0619","modified":1614667621447},{"_id":"public/archives/2021/index.html","hash":"ce00a3dd3ad861baf17ceded50eb3e3b2953fac0","modified":1614667621447},{"_id":"public/archives/2021/02/index.html","hash":"008586e70037811d78f09b051996cd1a82992163","modified":1614667621447},{"_id":"public/tags/无标度/index.html","hash":"fbcca5424a2c602c3c8f636dedc757985ca07d43","modified":1614667621447},{"_id":"public/tags/网络/index.html","hash":"51047539e8600a98438e1e69025a6c3fc3ef8d8e","modified":1614667621447},{"_id":"public/2021/02/24/无标度网络的生成模型/index.html","hash":"0d61ed07380b23c4b5fff9f17a42e50a3900b398","modified":1614667621447},{"_id":"public/index.html","hash":"25f6922cdaef05746773e9df17471c9c941987a1","modified":1614667621447},{"_id":"public/images/logo-header.png","hash":"651a9b5148d097e7498b27bb2e502ea10e0041b4","modified":1614667621447},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1614667621447},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1614667621447},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1614667621447},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1614667621447},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1614667621447},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1614667621447},{"_id":"public/css/style.css","hash":"263d98c93ae32dda6f7bbc8473105f3c441aca99","modified":1614667621447},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1614667621447},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1614667621447},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1614667621447},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1614667621447},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1614667621447}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2021-02-24T08:30:00.000Z","_content":"\nWho is your daddy?\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-02-24 16:30:00\n---\n\nWho is your daddy?\n","updated":"2021-02-24T08:38:48.533Z","path":"about/index.html","comments":1,"layout":"page","_id":"cklrneulg0000kdj80y7i6pwp","content":"<p>Who is your daddy?</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Who is your daddy?</p>\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-02-23T14:12:26.589Z","updated":"2021-02-23T14:12:26.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklrneuli0001kdj8bqbd6mhi","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"layout":"test","title":"无标度网络的生成模型","date":"2021-02-24T06:55:32.000Z","mathjax":true,"_content":"\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201021162745191.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==,size_16,color_FFFFFF,t_70#pic_center)\n\n1999 年 Barabási 和 Albert 提出了无标度网络模型（简称 BA 模型）。无标度网络的重要特征为： 无标度网络的节点度分布服从幂律分布。\n\n无标度网络的度分布 $p(d)$ 满足$$p(d)\\sim d^{-\\alpha}，$$其中 $d$ 代表度的大小， $\\alpha$ 为度分布的幂律指数。 真实网络 $\\alpha$ 值一般介于 2~3之间。\n\n近年来越来越多的研究表明， 真实世界网络既不是规则网络， 也不是随机网络， 而是兼具小世界和无标度特性的复杂网络， 具有与规则网络和随机网络截然不同的统计特性。\n\n本文采用的无标度网络生成模型是由 Barabási 和 Albert 于 1999 年提出的增长网络网络模型（BA 模型）。在该模型中，网络初始时具有 $m_0$ 个节点，两两互连。 之后每过一个时间单位增加一个新节点。新节点从当前网络中选择$m(m ≤ m_0)$ 个节点与之连接， 某节点 $v_i$ 被选中的概率 $p(v_i)$ 与其节点度 $d_i$ 的大小成正比，即$$p(v_i) = \\frac{d_i}{\\sum_j d_j}$$经过 t 个时间单位后，网络中含有 $m_0+t$ 个节点，$m_0(m_0-1)/2+mt$条边。可以证明当 t 足够大时， 按此规律增长的网络的度分布为幂指数等于 3 的幂律分布。\n\n依据新节点的连接规律，建立节点度演化的动力学模型：\n![在这里插入图片描述](https://img-blog.csdn.net/20181008113859419?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n其中最后一个等式在 $t$ 足够大时近似成立。 将节点 $i$ 加入网络的时间记为 $t_i$，\n则有初始条件 $d_i(t_i) = m$。解得\n![在这里插入图片描述](https://img-blog.csdn.net/20181008114022515?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n在 $t$ 足够大， 对任意节点 $i$， 其度的大小满足\n![在这里插入图片描述](https://img-blog.csdn.net/20181008114111695?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n![在这里插入图片描述](https://img-blog.csdn.net/20181008114126346?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n其中第三个等式成立的原因是加入节点的时间是等间隔的。上式正是网络节点度的概率分布函数， 可以求出节点度的概率密度函数 $p(d)$ 为\n![在这里插入图片描述](https://img-blog.csdn.net/20181008114239376?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n可知所生成网络的幂律分布的指数为 3。下面的matlab程序模拟了BA网络的演化过程：\n\n```matlab\nfunction scale_free(N,m0,m)\n%\n%param  N: num of vertices 期望节点数\n%param m0: num of initial vertices 初始边数\n%param  m: num of vertices a new node try to connect 新节点连接的边数\n%\ntic;\n\nI = 2 ;    %生成的网络个数，只为统计需要\n\nrealization_of_distribution = sparse( I , N ) ;\nfor J = 1 : I\n    format long;\n\n \t%初始化邻接矩阵，前m0个节点两两互连\n    adjacent_matrix = sparse( m0 , m0 ) ;\n    parfor i = 1 : m0\n        for j = 1 : m0\n            if j ~= i\n                adjacent_matrix( i , j ) = 1 ;\n            end\n        end\n    end\n    adjacent_matrix = sparse( adjacent_matrix ) ;\n\n\t% 计算当前节点度分布\n    node_degree = sparse( 1 , m0 ) ;\n    for p = 1 : m0\n        node_degree( p ) = sum( adjacent_matrix( 1 : m0 , p ) ) ;\n    end\n\n\t% 开始演化\n    for iteration = m0 + 1 : N\n        total_degree = 2 * m * ( iteration - m0 -1 ) + m0*(m0-1) ; % m*2\n        degree_frequency = node_degree / total_degree ;\n        cum_distribution = cumsum( degree_frequency ) ;\n\n        choose = zeros( 1 , m ) ;\n        for new_edge = 1:m\n            r = rand(1) ;\n            choose_edge = find( cum_distribution >= r ,1) ;\n            while any(choose == choose_edge)\n                r = rand(1) ;\n                choose_edge = find(  cum_distribution >= r,1) ;\n            end\n            choose(new_edge) = choose_edge;\n        end\n\n        for k = 1 : m\n            adjacent_matrix( iteration , choose(k) ) = 1 ;\n            adjacent_matrix( choose(k) , iteration ) = 1 ;\n        end\n\n        for p = 1 : iteration\n            node_degree(p) = sum( adjacent_matrix( 1 : iteration , p ) ) ;\n        end\n    end\n\n    number_of_nodes_with_equal_degree = zeros( 1 , N ) ;\n\n    parfor i = 1 : N\n        number_of_nodes_with_equal_degree(i) = length( find( node_degree == i ) ) ;\n    end\n    realization_of_distribution( J , : ) = number_of_nodes_with_equal_degree ;\n\n    save(['adj_',num2str(J)],'adjacent_matrix');\nend\n\n%{\n%plot degree distribution 在双对数坐标下画图\n\naverage = sum( realization_of_distribution )/ ( I * N );\nloglog( 1:N , average , '*' )\naxis([1 N 0.0000001 0.9])\nhold on;\nx = 1:N;\ny = 2 * m^2 * x .^ ( -3 ) ;\nloglog( x , y , 'r' ) ;  %  p(k)=2*m^2*k^(-3)\n\n%}\ntoc;\n\nend\n```\n---\n人工生成网络的概率质量函数（网络节点数 $N$ 分别为 50、 100、 200、 400）\n![在这里插入图片描述](https://img-blog.csdn.net/20181008113233633?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n图中直线为理论结果： $p(d)=2\\frac{m^2}{d^3}$。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201028100746209.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n","source":"_posts/无标度网络的生成模型.md","raw":"---\nlayout: test\ntitle: 无标度网络的生成模型\ndate: 2021-02-24 14:55:32\ntags: [无标度, 网络]\nmathjax: true\n---\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201021162745191.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==,size_16,color_FFFFFF,t_70#pic_center)\n\n1999 年 Barabási 和 Albert 提出了无标度网络模型（简称 BA 模型）。无标度网络的重要特征为： 无标度网络的节点度分布服从幂律分布。\n\n无标度网络的度分布 $p(d)$ 满足$$p(d)\\sim d^{-\\alpha}，$$其中 $d$ 代表度的大小， $\\alpha$ 为度分布的幂律指数。 真实网络 $\\alpha$ 值一般介于 2~3之间。\n\n近年来越来越多的研究表明， 真实世界网络既不是规则网络， 也不是随机网络， 而是兼具小世界和无标度特性的复杂网络， 具有与规则网络和随机网络截然不同的统计特性。\n\n本文采用的无标度网络生成模型是由 Barabási 和 Albert 于 1999 年提出的增长网络网络模型（BA 模型）。在该模型中，网络初始时具有 $m_0$ 个节点，两两互连。 之后每过一个时间单位增加一个新节点。新节点从当前网络中选择$m(m ≤ m_0)$ 个节点与之连接， 某节点 $v_i$ 被选中的概率 $p(v_i)$ 与其节点度 $d_i$ 的大小成正比，即$$p(v_i) = \\frac{d_i}{\\sum_j d_j}$$经过 t 个时间单位后，网络中含有 $m_0+t$ 个节点，$m_0(m_0-1)/2+mt$条边。可以证明当 t 足够大时， 按此规律增长的网络的度分布为幂指数等于 3 的幂律分布。\n\n依据新节点的连接规律，建立节点度演化的动力学模型：\n![在这里插入图片描述](https://img-blog.csdn.net/20181008113859419?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n其中最后一个等式在 $t$ 足够大时近似成立。 将节点 $i$ 加入网络的时间记为 $t_i$，\n则有初始条件 $d_i(t_i) = m$。解得\n![在这里插入图片描述](https://img-blog.csdn.net/20181008114022515?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n在 $t$ 足够大， 对任意节点 $i$， 其度的大小满足\n![在这里插入图片描述](https://img-blog.csdn.net/20181008114111695?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n![在这里插入图片描述](https://img-blog.csdn.net/20181008114126346?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n其中第三个等式成立的原因是加入节点的时间是等间隔的。上式正是网络节点度的概率分布函数， 可以求出节点度的概率密度函数 $p(d)$ 为\n![在这里插入图片描述](https://img-blog.csdn.net/20181008114239376?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n可知所生成网络的幂律分布的指数为 3。下面的matlab程序模拟了BA网络的演化过程：\n\n```matlab\nfunction scale_free(N,m0,m)\n%\n%param  N: num of vertices 期望节点数\n%param m0: num of initial vertices 初始边数\n%param  m: num of vertices a new node try to connect 新节点连接的边数\n%\ntic;\n\nI = 2 ;    %生成的网络个数，只为统计需要\n\nrealization_of_distribution = sparse( I , N ) ;\nfor J = 1 : I\n    format long;\n\n \t%初始化邻接矩阵，前m0个节点两两互连\n    adjacent_matrix = sparse( m0 , m0 ) ;\n    parfor i = 1 : m0\n        for j = 1 : m0\n            if j ~= i\n                adjacent_matrix( i , j ) = 1 ;\n            end\n        end\n    end\n    adjacent_matrix = sparse( adjacent_matrix ) ;\n\n\t% 计算当前节点度分布\n    node_degree = sparse( 1 , m0 ) ;\n    for p = 1 : m0\n        node_degree( p ) = sum( adjacent_matrix( 1 : m0 , p ) ) ;\n    end\n\n\t% 开始演化\n    for iteration = m0 + 1 : N\n        total_degree = 2 * m * ( iteration - m0 -1 ) + m0*(m0-1) ; % m*2\n        degree_frequency = node_degree / total_degree ;\n        cum_distribution = cumsum( degree_frequency ) ;\n\n        choose = zeros( 1 , m ) ;\n        for new_edge = 1:m\n            r = rand(1) ;\n            choose_edge = find( cum_distribution >= r ,1) ;\n            while any(choose == choose_edge)\n                r = rand(1) ;\n                choose_edge = find(  cum_distribution >= r,1) ;\n            end\n            choose(new_edge) = choose_edge;\n        end\n\n        for k = 1 : m\n            adjacent_matrix( iteration , choose(k) ) = 1 ;\n            adjacent_matrix( choose(k) , iteration ) = 1 ;\n        end\n\n        for p = 1 : iteration\n            node_degree(p) = sum( adjacent_matrix( 1 : iteration , p ) ) ;\n        end\n    end\n\n    number_of_nodes_with_equal_degree = zeros( 1 , N ) ;\n\n    parfor i = 1 : N\n        number_of_nodes_with_equal_degree(i) = length( find( node_degree == i ) ) ;\n    end\n    realization_of_distribution( J , : ) = number_of_nodes_with_equal_degree ;\n\n    save(['adj_',num2str(J)],'adjacent_matrix');\nend\n\n%{\n%plot degree distribution 在双对数坐标下画图\n\naverage = sum( realization_of_distribution )/ ( I * N );\nloglog( 1:N , average , '*' )\naxis([1 N 0.0000001 0.9])\nhold on;\nx = 1:N;\ny = 2 * m^2 * x .^ ( -3 ) ;\nloglog( x , y , 'r' ) ;  %  p(k)=2*m^2*k^(-3)\n\n%}\ntoc;\n\nend\n```\n---\n人工生成网络的概率质量函数（网络节点数 $N$ 分别为 50、 100、 200、 400）\n![在这里插入图片描述](https://img-blog.csdn.net/20181008113233633?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n图中直线为理论结果： $p(d)=2\\frac{m^2}{d^3}$。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201028100746209.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n","slug":"无标度网络的生成模型","published":1,"updated":"2021-03-02T05:49:27.431Z","comments":1,"photos":[],"link":"","_id":"cklrneulk0002kdj897ulgya0","content":"<p><img src=\"https://img-blog.csdnimg.cn/20201021162745191.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>1999 年 Barabási 和 Albert 提出了无标度网络模型（简称 BA 模型）。无标度网络的重要特征为： 无标度网络的节点度分布服从幂律分布。</p>\n<p>无标度网络的度分布 $p(d)$ 满足<script type=\"math/tex\">p(d)\\sim d^{-\\alpha}，</script>其中 $d$ 代表度的大小， $\\alpha$ 为度分布的幂律指数。 真实网络 $\\alpha$ 值一般介于 2~3之间。</p>\n<p>近年来越来越多的研究表明， 真实世界网络既不是规则网络， 也不是随机网络， 而是兼具小世界和无标度特性的复杂网络， 具有与规则网络和随机网络截然不同的统计特性。</p>\n<p>本文采用的无标度网络生成模型是由 Barabási 和 Albert 于 1999 年提出的增长网络网络模型（BA 模型）。在该模型中，网络初始时具有 $m_0$ 个节点，两两互连。 之后每过一个时间单位增加一个新节点。新节点从当前网络中选择$m(m ≤ m_0)$ 个节点与之连接， 某节点 $v_i$ 被选中的概率 $p(v_i)$ 与其节点度 $d_i$ 的大小成正比，即<script type=\"math/tex\">p(v_i) = \\frac{d_i}{\\sum_j d_j}</script>经过 t 个时间单位后，网络中含有 $m_0+t$ 个节点，$m_0(m_0-1)/2+mt$条边。可以证明当 t 足够大时， 按此规律增长的网络的度分布为幂指数等于 3 的幂律分布。</p>\n<p>依据新节点的连接规律，建立节点度演化的动力学模型：<br><img src=\"https://img-blog.csdn.net/20181008113859419?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>其中最后一个等式在 $t$ 足够大时近似成立。 将节点 $i$ 加入网络的时间记为 $t_i$，<br>则有初始条件 $d_i(t_i) = m$。解得<br><img src=\"https://img-blog.csdn.net/20181008114022515?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>在 $t$ 足够大， 对任意节点 $i$， 其度的大小满足<br><img src=\"https://img-blog.csdn.net/20181008114111695?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdn.net/20181008114126346?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>其中第三个等式成立的原因是加入节点的时间是等间隔的。上式正是网络节点度的概率分布函数， 可以求出节点度的概率密度函数 $p(d)$ 为<br><img src=\"https://img-blog.csdn.net/20181008114239376?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>可知所生成网络的幂律分布的指数为 3。下面的matlab程序模拟了BA网络的演化过程：</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scale_free</span><span class=\"params\">(N,m0,m)</span></span></span><br><span class=\"line\"><span class=\"comment\">%</span></span><br><span class=\"line\"><span class=\"comment\">%param  N: num of vertices 期望节点数</span></span><br><span class=\"line\"><span class=\"comment\">%param m0: num of initial vertices 初始边数</span></span><br><span class=\"line\"><span class=\"comment\">%param  m: num of vertices a new node try to connect 新节点连接的边数</span></span><br><span class=\"line\"><span class=\"comment\">%</span></span><br><span class=\"line\">tic;</span><br><span class=\"line\"></span><br><span class=\"line\">I = <span class=\"number\">2</span> ;    <span class=\"comment\">%生成的网络个数，只为统计需要</span></span><br><span class=\"line\"></span><br><span class=\"line\">realization_of_distribution = sparse( I , N ) ;</span><br><span class=\"line\"><span class=\"keyword\">for</span> J = <span class=\"number\">1</span> : I</span><br><span class=\"line\">    format long;</span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"comment\">%初始化邻接矩阵，前m0个节点两两互连</span></span><br><span class=\"line\">    adjacent_matrix = sparse( m0 , m0 ) ;</span><br><span class=\"line\">    <span class=\"keyword\">parfor</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span> : m0</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"built_in\">j</span> = <span class=\"number\">1</span> : m0</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">j</span> ~= <span class=\"built_in\">i</span></span><br><span class=\"line\">                adjacent_matrix( <span class=\"built_in\">i</span> , <span class=\"built_in\">j</span> ) = <span class=\"number\">1</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    adjacent_matrix = sparse( adjacent_matrix ) ;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">% 计算当前节点度分布</span></span><br><span class=\"line\">    node_degree = sparse( <span class=\"number\">1</span> , m0 ) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p = <span class=\"number\">1</span> : m0</span><br><span class=\"line\">        node_degree( p ) = sum( adjacent_matrix( <span class=\"number\">1</span> : m0 , p ) ) ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">% 开始演化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> iteration = m0 + <span class=\"number\">1</span> : N</span><br><span class=\"line\">        total_degree = <span class=\"number\">2</span> * m * ( iteration - m0 <span class=\"number\">-1</span> ) + m0*(m0<span class=\"number\">-1</span>) ; <span class=\"comment\">% m*2</span></span><br><span class=\"line\">        degree_frequency = node_degree / total_degree ;</span><br><span class=\"line\">        cum_distribution = cumsum( degree_frequency ) ;</span><br><span class=\"line\"></span><br><span class=\"line\">        choose = <span class=\"built_in\">zeros</span>( <span class=\"number\">1</span> , m ) ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> new_edge = <span class=\"number\">1</span>:m</span><br><span class=\"line\">            r = <span class=\"built_in\">rand</span>(<span class=\"number\">1</span>) ;</span><br><span class=\"line\">            choose_edge = <span class=\"built_in\">find</span>( cum_distribution &gt;= r ,<span class=\"number\">1</span>) ;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> any(choose == choose_edge)</span><br><span class=\"line\">                r = <span class=\"built_in\">rand</span>(<span class=\"number\">1</span>) ;</span><br><span class=\"line\">                choose_edge = <span class=\"built_in\">find</span>(  cum_distribution &gt;= r,<span class=\"number\">1</span>) ;</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">            choose(new_edge) = choose_edge;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k = <span class=\"number\">1</span> : m</span><br><span class=\"line\">            adjacent_matrix( iteration , choose(k) ) = <span class=\"number\">1</span> ;</span><br><span class=\"line\">            adjacent_matrix( choose(k) , iteration ) = <span class=\"number\">1</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> p = <span class=\"number\">1</span> : iteration</span><br><span class=\"line\">            node_degree(p) = sum( adjacent_matrix( <span class=\"number\">1</span> : iteration , p ) ) ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    number_of_nodes_with_equal_degree = <span class=\"built_in\">zeros</span>( <span class=\"number\">1</span> , N ) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">parfor</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span> : N</span><br><span class=\"line\">        number_of_nodes_with_equal_degree(<span class=\"built_in\">i</span>) = <span class=\"built_in\">length</span>( <span class=\"built_in\">find</span>( node_degree == <span class=\"built_in\">i</span> ) ) ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    realization_of_distribution( J , : ) = number_of_nodes_with_equal_degree ;</span><br><span class=\"line\"></span><br><span class=\"line\">    save([<span class=\"string\">&#x27;adj_&#x27;</span>,num2str(J)],<span class=\"string\">&#x27;adjacent_matrix&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%&#123;</span></span><br><span class=\"line\"><span class=\"comment\">%plot degree distribution 在双对数坐标下画图</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">average = sum( realization_of_distribution )/ ( I * N );</span></span><br><span class=\"line\"><span class=\"comment\">loglog( 1:N , average , &#x27;*&#x27; )</span></span><br><span class=\"line\"><span class=\"comment\">axis([1 N 0.0000001 0.9])</span></span><br><span class=\"line\"><span class=\"comment\">hold on;</span></span><br><span class=\"line\"><span class=\"comment\">x = 1:N;</span></span><br><span class=\"line\"><span class=\"comment\">y = 2 * m^2 * x .^ ( -3 ) ;</span></span><br><span class=\"line\"><span class=\"comment\">loglog( x , y , &#x27;r&#x27; ) ;  %  p(k)=2*m^2*k^(-3)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">%&#125;</span></span><br><span class=\"line\">toc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></h2><p>人工生成网络的概率质量函数（网络节点数 $N$ 分别为 50、 100、 200、 400）<br><img src=\"https://img-blog.csdn.net/20181008113233633?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>图中直线为理论结果： $p(d)=2\\frac{m^2}{d^3}$。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201028100746209.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://img-blog.csdnimg.cn/20201021162745191.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>1999 年 Barabási 和 Albert 提出了无标度网络模型（简称 BA 模型）。无标度网络的重要特征为： 无标度网络的节点度分布服从幂律分布。</p>\n<p>无标度网络的度分布 $p(d)$ 满足<script type=\"math/tex\">p(d)\\sim d^{-\\alpha}，</script>其中 $d$ 代表度的大小， $\\alpha$ 为度分布的幂律指数。 真实网络 $\\alpha$ 值一般介于 2~3之间。</p>\n<p>近年来越来越多的研究表明， 真实世界网络既不是规则网络， 也不是随机网络， 而是兼具小世界和无标度特性的复杂网络， 具有与规则网络和随机网络截然不同的统计特性。</p>\n<p>本文采用的无标度网络生成模型是由 Barabási 和 Albert 于 1999 年提出的增长网络网络模型（BA 模型）。在该模型中，网络初始时具有 $m_0$ 个节点，两两互连。 之后每过一个时间单位增加一个新节点。新节点从当前网络中选择$m(m ≤ m_0)$ 个节点与之连接， 某节点 $v_i$ 被选中的概率 $p(v_i)$ 与其节点度 $d_i$ 的大小成正比，即<script type=\"math/tex\">p(v_i) = \\frac{d_i}{\\sum_j d_j}</script>经过 t 个时间单位后，网络中含有 $m_0+t$ 个节点，$m_0(m_0-1)/2+mt$条边。可以证明当 t 足够大时， 按此规律增长的网络的度分布为幂指数等于 3 的幂律分布。</p>\n<p>依据新节点的连接规律，建立节点度演化的动力学模型：<br><img src=\"https://img-blog.csdn.net/20181008113859419?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>其中最后一个等式在 $t$ 足够大时近似成立。 将节点 $i$ 加入网络的时间记为 $t_i$，<br>则有初始条件 $d_i(t_i) = m$。解得<br><img src=\"https://img-blog.csdn.net/20181008114022515?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>在 $t$ 足够大， 对任意节点 $i$， 其度的大小满足<br><img src=\"https://img-blog.csdn.net/20181008114111695?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdn.net/20181008114126346?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>其中第三个等式成立的原因是加入节点的时间是等间隔的。上式正是网络节点度的概率分布函数， 可以求出节点度的概率密度函数 $p(d)$ 为<br><img src=\"https://img-blog.csdn.net/20181008114239376?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>可知所生成网络的幂律分布的指数为 3。下面的matlab程序模拟了BA网络的演化过程：</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scale_free</span><span class=\"params\">(N,m0,m)</span></span></span><br><span class=\"line\"><span class=\"comment\">%</span></span><br><span class=\"line\"><span class=\"comment\">%param  N: num of vertices 期望节点数</span></span><br><span class=\"line\"><span class=\"comment\">%param m0: num of initial vertices 初始边数</span></span><br><span class=\"line\"><span class=\"comment\">%param  m: num of vertices a new node try to connect 新节点连接的边数</span></span><br><span class=\"line\"><span class=\"comment\">%</span></span><br><span class=\"line\">tic;</span><br><span class=\"line\"></span><br><span class=\"line\">I = <span class=\"number\">2</span> ;    <span class=\"comment\">%生成的网络个数，只为统计需要</span></span><br><span class=\"line\"></span><br><span class=\"line\">realization_of_distribution = sparse( I , N ) ;</span><br><span class=\"line\"><span class=\"keyword\">for</span> J = <span class=\"number\">1</span> : I</span><br><span class=\"line\">    format long;</span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"comment\">%初始化邻接矩阵，前m0个节点两两互连</span></span><br><span class=\"line\">    adjacent_matrix = sparse( m0 , m0 ) ;</span><br><span class=\"line\">    <span class=\"keyword\">parfor</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span> : m0</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"built_in\">j</span> = <span class=\"number\">1</span> : m0</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">j</span> ~= <span class=\"built_in\">i</span></span><br><span class=\"line\">                adjacent_matrix( <span class=\"built_in\">i</span> , <span class=\"built_in\">j</span> ) = <span class=\"number\">1</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    adjacent_matrix = sparse( adjacent_matrix ) ;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">% 计算当前节点度分布</span></span><br><span class=\"line\">    node_degree = sparse( <span class=\"number\">1</span> , m0 ) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p = <span class=\"number\">1</span> : m0</span><br><span class=\"line\">        node_degree( p ) = sum( adjacent_matrix( <span class=\"number\">1</span> : m0 , p ) ) ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">% 开始演化</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> iteration = m0 + <span class=\"number\">1</span> : N</span><br><span class=\"line\">        total_degree = <span class=\"number\">2</span> * m * ( iteration - m0 <span class=\"number\">-1</span> ) + m0*(m0<span class=\"number\">-1</span>) ; <span class=\"comment\">% m*2</span></span><br><span class=\"line\">        degree_frequency = node_degree / total_degree ;</span><br><span class=\"line\">        cum_distribution = cumsum( degree_frequency ) ;</span><br><span class=\"line\"></span><br><span class=\"line\">        choose = <span class=\"built_in\">zeros</span>( <span class=\"number\">1</span> , m ) ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> new_edge = <span class=\"number\">1</span>:m</span><br><span class=\"line\">            r = <span class=\"built_in\">rand</span>(<span class=\"number\">1</span>) ;</span><br><span class=\"line\">            choose_edge = <span class=\"built_in\">find</span>( cum_distribution &gt;= r ,<span class=\"number\">1</span>) ;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> any(choose == choose_edge)</span><br><span class=\"line\">                r = <span class=\"built_in\">rand</span>(<span class=\"number\">1</span>) ;</span><br><span class=\"line\">                choose_edge = <span class=\"built_in\">find</span>(  cum_distribution &gt;= r,<span class=\"number\">1</span>) ;</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">            choose(new_edge) = choose_edge;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k = <span class=\"number\">1</span> : m</span><br><span class=\"line\">            adjacent_matrix( iteration , choose(k) ) = <span class=\"number\">1</span> ;</span><br><span class=\"line\">            adjacent_matrix( choose(k) , iteration ) = <span class=\"number\">1</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> p = <span class=\"number\">1</span> : iteration</span><br><span class=\"line\">            node_degree(p) = sum( adjacent_matrix( <span class=\"number\">1</span> : iteration , p ) ) ;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    number_of_nodes_with_equal_degree = <span class=\"built_in\">zeros</span>( <span class=\"number\">1</span> , N ) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">parfor</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span> : N</span><br><span class=\"line\">        number_of_nodes_with_equal_degree(<span class=\"built_in\">i</span>) = <span class=\"built_in\">length</span>( <span class=\"built_in\">find</span>( node_degree == <span class=\"built_in\">i</span> ) ) ;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    realization_of_distribution( J , : ) = number_of_nodes_with_equal_degree ;</span><br><span class=\"line\"></span><br><span class=\"line\">    save([<span class=\"string\">&#x27;adj_&#x27;</span>,num2str(J)],<span class=\"string\">&#x27;adjacent_matrix&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%&#123;</span></span><br><span class=\"line\"><span class=\"comment\">%plot degree distribution 在双对数坐标下画图</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">average = sum( realization_of_distribution )/ ( I * N );</span></span><br><span class=\"line\"><span class=\"comment\">loglog( 1:N , average , &#x27;*&#x27; )</span></span><br><span class=\"line\"><span class=\"comment\">axis([1 N 0.0000001 0.9])</span></span><br><span class=\"line\"><span class=\"comment\">hold on;</span></span><br><span class=\"line\"><span class=\"comment\">x = 1:N;</span></span><br><span class=\"line\"><span class=\"comment\">y = 2 * m^2 * x .^ ( -3 ) ;</span></span><br><span class=\"line\"><span class=\"comment\">loglog( x , y , &#x27;r&#x27; ) ;  %  p(k)=2*m^2*k^(-3)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">%&#125;</span></span><br><span class=\"line\">toc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure></h2><p>人工生成网络的概率质量函数（网络节点数 $N$ 分别为 50、 100、 200、 400）<br><img src=\"https://img-blog.csdn.net/20181008113233633?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"><br>图中直线为理论结果： $p(d)=2\\frac{m^2}{d^3}$。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201028100746209.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l0bmVyZA==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cklrneulk0002kdj897ulgya0","tag_id":"cklrneulm0003kdj8dsh88rtq","_id":"cklrneuln0005kdj87vdpccdd"},{"post_id":"cklrneulk0002kdj897ulgya0","tag_id":"cklrneuln0004kdj8bkgcfdoh","_id":"cklrneuln0006kdj84357d0h1"}],"Tag":[{"name":"无标度","_id":"cklrneulm0003kdj8dsh88rtq"},{"name":"网络","_id":"cklrneuln0004kdj8bkgcfdoh"}]}}